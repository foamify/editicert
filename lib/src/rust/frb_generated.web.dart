// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.14.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/canvas.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  CanvasPoint dco_decode_box_autoadd_canvas_point(dynamic raw);

  @protected
  Line dco_decode_box_autoadd_line(dynamic raw);

  @protected
  MarqueeRect dco_decode_box_autoadd_marquee_rect(dynamic raw);

  @protected
  CanvasPoint dco_decode_canvas_point(dynamic raw);

  @protected
  double dco_decode_f_64(dynamic raw);

  @protected
  Line dco_decode_line(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  List<Line> dco_decode_list_line(dynamic raw);

  @protected
  List<Polygon> dco_decode_list_polygon(dynamic raw);

  @protected
  List<double> dco_decode_list_prim_f_64_loose(dynamic raw);

  @protected
  Float64List dco_decode_list_prim_f_64_strict(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  MarqueeRect dco_decode_marquee_rect(dynamic raw);

  @protected
  Polygon dco_decode_polygon(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  CanvasPoint sse_decode_box_autoadd_canvas_point(SseDeserializer deserializer);

  @protected
  Line sse_decode_box_autoadd_line(SseDeserializer deserializer);

  @protected
  MarqueeRect sse_decode_box_autoadd_marquee_rect(SseDeserializer deserializer);

  @protected
  CanvasPoint sse_decode_canvas_point(SseDeserializer deserializer);

  @protected
  double sse_decode_f_64(SseDeserializer deserializer);

  @protected
  Line sse_decode_line(SseDeserializer deserializer);

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  List<Line> sse_decode_list_line(SseDeserializer deserializer);

  @protected
  List<Polygon> sse_decode_list_polygon(SseDeserializer deserializer);

  @protected
  List<double> sse_decode_list_prim_f_64_loose(SseDeserializer deserializer);

  @protected
  Float64List sse_decode_list_prim_f_64_strict(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  MarqueeRect sse_decode_marquee_rect(SseDeserializer deserializer);

  @protected
  Polygon sse_decode_polygon(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  String cst_encode_String(String raw) {
    return raw;
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_canvas_point(CanvasPoint raw) {
    return cst_encode_canvas_point(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_line(Line raw) {
    return cst_encode_line(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_marquee_rect(MarqueeRect raw) {
    return cst_encode_marquee_rect(raw);
  }

  @protected
  List<dynamic> cst_encode_canvas_point(CanvasPoint raw) {
    return [cst_encode_f_64(raw.x), cst_encode_f_64(raw.y)];
  }

  @protected
  List<dynamic> cst_encode_line(Line raw) {
    return [cst_encode_canvas_point(raw.p1), cst_encode_canvas_point(raw.p2)];
  }

  @protected
  List<dynamic> cst_encode_list_String(List<String> raw) {
    return raw.map(cst_encode_String).toList();
  }

  @protected
  List<dynamic> cst_encode_list_line(List<Line> raw) {
    return raw.map(cst_encode_line).toList();
  }

  @protected
  List<dynamic> cst_encode_list_polygon(List<Polygon> raw) {
    return raw.map(cst_encode_polygon).toList();
  }

  @protected
  List<double> cst_encode_list_prim_f_64_loose(List<double> raw) {
    return raw;
  }

  @protected
  Float64List cst_encode_list_prim_f_64_strict(Float64List raw) {
    return raw;
  }

  @protected
  Uint8List cst_encode_list_prim_u_8_strict(Uint8List raw) {
    return raw;
  }

  @protected
  List<dynamic> cst_encode_marquee_rect(MarqueeRect raw) {
    return [
      cst_encode_f_64(raw.x),
      cst_encode_f_64(raw.y),
      cst_encode_f_64(raw.width),
      cst_encode_f_64(raw.height)
    ];
  }

  @protected
  List<dynamic> cst_encode_polygon(Polygon raw) {
    return [cst_encode_String(raw.id), cst_encode_list_line(raw.lines)];
  }

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  double cst_encode_f_64(double raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_canvas_point(
      CanvasPoint self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_line(Line self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_marquee_rect(
      MarqueeRect self, SseSerializer serializer);

  @protected
  void sse_encode_canvas_point(CanvasPoint self, SseSerializer serializer);

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer);

  @protected
  void sse_encode_line(Line self, SseSerializer serializer);

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_line(List<Line> self, SseSerializer serializer);

  @protected
  void sse_encode_list_polygon(List<Polygon> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_f_64_loose(
      List<double> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_f_64_strict(
      Float64List self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_marquee_rect(MarqueeRect self, SseSerializer serializer);

  @protected
  void sse_encode_polygon(Polygon self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire extends BaseWire {
  RustLibWire.fromExternalLibrary(ExternalLibrary lib);

  void dart_fn_deliver_output(int call_id, PlatformGeneralizedUint8ListPtr ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.dart_fn_deliver_output(
          call_id, ptr_, rust_vec_len_, data_len_);

  void wire_MarqueeRect_contains_point(
          NativePortType port_, List<dynamic> that, List<dynamic> point) =>
      wasmModule.wire_MarqueeRect_contains_point(port_, that, point);

  void wire_MarqueeRect_lines(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_MarqueeRect_lines(port_, that);

  void wire_get_intersecting_ids(NativePortType port_, List<dynamic> rect,
          List<dynamic> polygons, List<double> matrix_storage) =>
      wasmModule.wire_get_intersecting_ids(
          port_, rect, polygons, matrix_storage);

  void wire_is_two_lines_intersecting(
          NativePortType port_, List<dynamic> line1, List<dynamic> line2) =>
      wasmModule.wire_is_two_lines_intersecting(port_, line1, line2);

  void wire_init_app(NativePortType port_) => wasmModule.wire_init_app(port_);
}

@JS('wasm_bindgen')
external RustLibWasmModule get wasmModule;

@JS()
@anonymous
class RustLibWasmModule implements WasmModule {
  @override
  external Object /* Promise */ call([String? moduleName]);

  @override
  external RustLibWasmModule bind(dynamic thisArg, String moduleName);

  external void dart_fn_deliver_output(int call_id,
      PlatformGeneralizedUint8ListPtr ptr_, int rust_vec_len_, int data_len_);

  external void wire_MarqueeRect_contains_point(
      NativePortType port_, List<dynamic> that, List<dynamic> point);

  external void wire_MarqueeRect_lines(
      NativePortType port_, List<dynamic> that);

  external void wire_get_intersecting_ids(NativePortType port_,
      List<dynamic> rect, List<dynamic> polygons, List<double> matrix_storage);

  external void wire_is_two_lines_intersecting(
      NativePortType port_, List<dynamic> line1, List<dynamic> line2);

  external void wire_init_app(NativePortType port_);
}
