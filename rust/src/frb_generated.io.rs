// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.14.

// Section: imports

use super::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: dart2rust

impl CstDecode<String> for *mut wire_cst_list_prim_u_8_strict {
    fn cst_decode(self) -> String {
        let vec: Vec<u8> = self.cst_decode();
        String::from_utf8(vec).unwrap()
    }
}
impl CstDecode<crate::api::canvas::CanvasPoint> for *mut wire_cst_canvas_point {
    fn cst_decode(self) -> crate::api::canvas::CanvasPoint {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::canvas::CanvasPoint>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::canvas::Line> for *mut wire_cst_line {
    fn cst_decode(self) -> crate::api::canvas::Line {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::canvas::Line>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::canvas::MarqueeRect> for *mut wire_cst_marquee_rect {
    fn cst_decode(self) -> crate::api::canvas::MarqueeRect {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::canvas::MarqueeRect>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::canvas::CanvasPoint> for wire_cst_canvas_point {
    fn cst_decode(self) -> crate::api::canvas::CanvasPoint {
        crate::api::canvas::CanvasPoint {
            x: self.x.cst_decode(),
            y: self.y.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::canvas::Line> for wire_cst_line {
    fn cst_decode(self) -> crate::api::canvas::Line {
        crate::api::canvas::Line {
            p1: self.p1.cst_decode(),
            p2: self.p2.cst_decode(),
        }
    }
}
impl CstDecode<Vec<String>> for *mut wire_cst_list_String {
    fn cst_decode(self) -> Vec<String> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::canvas::Line>> for *mut wire_cst_list_line {
    fn cst_decode(self) -> Vec<crate::api::canvas::Line> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::canvas::Polygon>> for *mut wire_cst_list_polygon {
    fn cst_decode(self) -> Vec<crate::api::canvas::Polygon> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<f64>> for *mut wire_cst_list_prim_f_64_loose {
    fn cst_decode(self) -> Vec<f64> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<f64>> for *mut wire_cst_list_prim_f_64_strict {
    fn cst_decode(self) -> Vec<f64> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<crate::api::canvas::MarqueeRect> for wire_cst_marquee_rect {
    fn cst_decode(self) -> crate::api::canvas::MarqueeRect {
        crate::api::canvas::MarqueeRect {
            x: self.x.cst_decode(),
            y: self.y.cst_decode(),
            width: self.width.cst_decode(),
            height: self.height.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::canvas::Polygon> for wire_cst_polygon {
    fn cst_decode(self) -> crate::api::canvas::Polygon {
        crate::api::canvas::Polygon {
            id: self.id.cst_decode(),
            lines: self.lines.cst_decode(),
        }
    }
}
pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}
impl NewWithNullPtr for wire_cst_canvas_point {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
            y: Default::default(),
        }
    }
}
impl Default for wire_cst_canvas_point {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_line {
    fn new_with_null_ptr() -> Self {
        Self {
            p1: Default::default(),
            p2: Default::default(),
        }
    }
}
impl Default for wire_cst_line {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_marquee_rect {
    fn new_with_null_ptr() -> Self {
        Self {
            x: Default::default(),
            y: Default::default(),
            width: Default::default(),
            height: Default::default(),
        }
    }
}
impl Default for wire_cst_marquee_rect {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_polygon {
    fn new_with_null_ptr() -> Self {
        Self {
            id: core::ptr::null_mut(),
            lines: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_polygon {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}

#[no_mangle]
pub extern "C" fn frbgen_editicert_dart_fn_deliver_output(
    call_id: i32,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    let message = unsafe {
        flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    };
    FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id, message)
}

#[no_mangle]
pub extern "C" fn frbgen_editicert_wire_MarqueeRect_contains_point(
    port_: i64,
    that: *mut wire_cst_marquee_rect,
    point: *mut wire_cst_canvas_point,
) {
    wire_MarqueeRect_contains_point_impl(port_, that, point)
}

#[no_mangle]
pub extern "C" fn frbgen_editicert_wire_MarqueeRect_lines(
    port_: i64,
    that: *mut wire_cst_marquee_rect,
) {
    wire_MarqueeRect_lines_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_editicert_wire_get_intersecting_ids(
    port_: i64,
    rect: *mut wire_cst_marquee_rect,
    polygons: *mut wire_cst_list_polygon,
    matrix_storage: *mut wire_cst_list_prim_f_64_loose,
) {
    wire_get_intersecting_ids_impl(port_, rect, polygons, matrix_storage)
}

#[no_mangle]
pub extern "C" fn frbgen_editicert_wire_is_two_lines_intersecting(
    port_: i64,
    line1: *mut wire_cst_line,
    line2: *mut wire_cst_line,
) {
    wire_is_two_lines_intersecting_impl(port_, line1, line2)
}

#[no_mangle]
pub extern "C" fn frbgen_editicert_wire_init_app(port_: i64) {
    wire_init_app_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_editicert_cst_new_box_autoadd_canvas_point() -> *mut wire_cst_canvas_point
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_canvas_point::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_editicert_cst_new_box_autoadd_line() -> *mut wire_cst_line {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_line::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_editicert_cst_new_box_autoadd_marquee_rect() -> *mut wire_cst_marquee_rect
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_marquee_rect::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_editicert_cst_new_list_String(len: i32) -> *mut wire_cst_list_String {
    let wrap = wire_cst_list_String {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <*mut wire_cst_list_prim_u_8_strict>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_editicert_cst_new_list_line(len: i32) -> *mut wire_cst_list_line {
    let wrap = wire_cst_list_line {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_line>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_editicert_cst_new_list_polygon(len: i32) -> *mut wire_cst_list_polygon {
    let wrap = wire_cst_list_polygon {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_polygon>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_editicert_cst_new_list_prim_f_64_loose(
    len: i32,
) -> *mut wire_cst_list_prim_f_64_loose {
    let ans = wire_cst_list_prim_f_64_loose {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_editicert_cst_new_list_prim_f_64_strict(
    len: i32,
) -> *mut wire_cst_list_prim_f_64_strict {
    let ans = wire_cst_list_prim_f_64_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_editicert_cst_new_list_prim_u_8_strict(
    len: i32,
) -> *mut wire_cst_list_prim_u_8_strict {
    let ans = wire_cst_list_prim_u_8_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_canvas_point {
    x: f64,
    y: f64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_line {
    p1: wire_cst_canvas_point,
    p2: wire_cst_canvas_point,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_String {
    ptr: *mut *mut wire_cst_list_prim_u_8_strict,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_line {
    ptr: *mut wire_cst_line,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_polygon {
    ptr: *mut wire_cst_polygon,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_f_64_loose {
    ptr: *mut f64,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_f_64_strict {
    ptr: *mut f64,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_8_strict {
    ptr: *mut u8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_marquee_rect {
    x: f64,
    y: f64,
    width: f64,
    height: f64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_polygon {
    id: *mut wire_cst_list_prim_u_8_strict,
    lines: *mut wire_cst_list_line,
}
